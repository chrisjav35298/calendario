
{% extends 'base.html.twig' %}

{% block title %}Solicitar Turno{% endblock %}
    {% block stylesheets %}
    
{# 
    <style>
        .error-message {
        background-color: #f8d7da; /* Color de fondo rojo claro */
        color: #721c24; /* Color de texto rojo oscuro */
        border: 1px solid #f5c6cb; /* Borde rojo */
        padding: 10px; /* Espaciado interno */
        margin-bottom: 10px; /* Margen inferior */
        }


    </style> #}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/styles.css') }}">

    {% endblock %}


   {% block main %}
 
  
   <div class="space-y-12">
   <div class="border-b border-blue-900/10 pb-12">
     <h2 class="text-base font-semibold leading-7 text-gray-900">Seleccionar un turno</h2>
    {% for flashMessage in app.flashes('error') %}
    <div class="error-message bg-red-100 text-red-800 border border-red-400 py-2 px-4 rounded-md">
        {{ flashMessage }}
    </div>
    {% endfor %}
    <div class="flow-root bg-gray-100  px-4 rounded-md">
        {{ form_start(form, {'attr': {'class': 'mt-8'}}) }}
        <div class="my-4">
            <label for="date" class="block text-sm font-medium leading-6 text-gray-900">Fecha</label>
            {{ form_widget(form.fecha, { 'attr': {'class': 'form-input mt-1 block w-full 
            rounded border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'} }) }}
        </div>
        <div class="my-4">
            <label for="solicitante" class="block text-sm font-medium leading-6 text-gray-900">Solicitante</label>
            {{ form_widget(form.solicitante, { 'attr': {'class': 'form-input mt-1 block w-full rounded border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'} }) }}
        </div>
        <div class="my-4">
            <label for="turno" class="block text-sm font-medium leading-6 text-gray-900">Turno</label>
            {{ form_widget(form.turno, { 'attr': {'class': 'form-input mt-1 block w-full rounded border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'} }) }}
        </div>
        <!-- Agregué estilos para los campos ocultos también -->
        <div class="my-4 hidden">
            <label for="observacion" class="block text-sm font-medium leading-6 text-gray-900">Observación</label>
            {{ form_widget(form.observacion, { 'attr': {'class': 'form-input mt-1 block w-full rounded border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'} }) }}
        </div>
        <div class="my-4 hidden">
            <label for="estado" class="block text-sm font-medium leading-6 text-gray-900">Estado</label>
            {{ form_widget(form.estado, { 'attr': {'class': 'form-input mt-1 block w-full rounded border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'} }) }}
        </div>
        <div class="my-7">
        <button type="submit" class="btn btn-primary bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
        Enviar</button>
    {# <button type="submit" class="btn btn-primary">Enviar</button> #}
        </div>
        {{ form_end(form) }}
    </div>

<div id="calendar" class="mt-4"></div>

</main>

{% endblock %}
{% block footer%}

{{ parent()}}
{% endblock %}


{% block javascripts %}
    <script src="{{ asset('js/calendario/index.global.min.js') }}"></script>   

    <script>
        document.addEventListener('DOMContentLoaded', function() {
    let ruta = "{{ path('establecimiento_ajax') }}";
    var inputElement = document.getElementById('solicitar_turno_solicitante');

    // Función para manejar el evento de entrada de teclado
    function handleInput() {
        var inputValue = inputElement.value.trim();
        var numericValue = parseInt(inputValue);

        // Limpiar las sugerencias anteriores
        clearSuggestions();

        // Si el valor no es un número, salir
        if (isNaN(numericValue)) {
            return;
        }

        // Realizar solicitud AJAX para buscar establecimientos que coincidan con el cueanexo ingresado
        fetch(ruta + '?cueanexo=' + numericValue, {
            method: 'GET',
        })
        .then(function(response) {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(function(data) {
            // Mostrar las sugerencias basadas en los datos recibidos
            data.forEach(function(establecimiento) {
                var suggestion = document.createElement('div');
                suggestion.textContent = establecimiento.cueanexo + ' - ' + establecimiento.nombre;
                suggestion.classList.add('suggestion');
                suggestion.addEventListener('click', function() {
                    // Al hacer clic en una sugerencia, llenar el campo de entrada con el cueanexo y el nombre seleccionados
                    inputElement.value = establecimiento.cueanexo + ' - ' + establecimiento.nombre;
                    // Limpiar las sugerencias después de seleccionar una
                    clearSuggestions();
                });
                inputElement.parentNode.appendChild(suggestion);
            });
        })
        .catch(function(error) {
            console.error('Error al obtener las sugerencias:', error);
        });
    }

    // Agregar un event listener para el evento de entrada de teclado
    inputElement.addEventListener('input', handleInput);

    // Función para limpiar las sugerencias
    function clearSuggestions() {
        inputElement.parentNode.querySelectorAll('.suggestion').forEach(function(suggestion) {
            suggestion.remove();
        });
    }
});


    // Función para validar que la fecha seleccionada no sea anterior al día de hoy
    document.addEventListener('DOMContentLoaded', function() {
        const inputFecha = document.getElementById('solicitar_turno_fecha');
        const fechaActual = new Date();
        document.getElementById('solicitar_turno_fecha').focus();
        inputFecha.addEventListener('change', function(event) {
            const fechaIngresada = new Date(event.target.value);

            // Verificar si la fecha ingresada es menor que la fecha actual
            if (fechaIngresada < fechaActual) {
                alert('No puede seleccionar una fecha anterior al día de hoy!');
                event.target.value = ''; // Limpiar el valor del input
            }
        });

        // Limpiar sugerencias cuando el campo de entrada se vacía
        inputFecha.addEventListener('input', function(event) {
            if (event.target.value.trim() === '') {
                clearSuggestions();
            }
        });
    });

 //Inicialización del calendario y manejo de selección de fechas
    document.addEventListener('DOMContentLoaded', function() {
        let turnosOcupados = {{ turnosOcupados|json_encode|raw }};
        
        const calendarEl = document.getElementById('calendar');
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            selectable: true,
            locale: 'es',
            select: function(info) {
                const fechaSeleccionada = info.start;
                const fechaActual = new Date();
                
                // Verificar si la fecha seleccionada es menor que la fecha actual
                if (fechaSeleccionada < fechaActual) {
                    alert('No puede seleccionar una fecha anterior al día de hoy!');
                    return;
                }

                const year = fechaSeleccionada.getFullYear();
                const month = String(fechaSeleccionada.getMonth() + 1).padStart(2, '0');
                const day = String(fechaSeleccionada.getDate()).padStart(2, '0');

                const fechaFormateada = `${year}-${month}-${day}`;
                const fechaFormateadaDos = `${year}-${month}-${day}`;

                if (turnosOcupados.includes(fechaFormateada)) {
                    return;
                }

                document.getElementById('solicitar_turno_fecha').value = fechaFormateada;
            },
            events: [
            {% for turno in turnosOcupados %}
           
            {
                title: '{{ turno.solicitante }} - {{ turno.turno }}',
                start: '{{ turno.fecha }}',
                color: 'violet' // Color para indicar que el turno está ocupado
            },
            {% endfor %}
        ]
        });
        calendar.render();
    });

</script> 

{% endblock %}